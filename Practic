from multiprocessing import pool

import letters

monoalpha_cipher = {
'a': 'q',
'b': 'y',
'c': 'z',
'd': 'n',
'e': 'o',
'f': 'p',
'g': 'x',
'h': 'r',
'i': 's',
'j': 't',
'k': 'u',
'l': 'v',
'm': 'w',
'n': 'a',
'o': 'b',
'p': 'c',
'q': 'd',
'r': 'e',
's': 'f',
't': 'g',
'u': 'h',
'v': 'i',
'w': 'j',
'x': 'k',
'y': 'l',
'z': 'm',
' ': ' ',
}

from string import letter, digits
from random import shuffle

def random_monoalpha_cipher(pool = None):
   if pool is None:
    pool = letters + digits
   original_pool = list(pool)
   shuffled_pool = list(pool)
   shuffle(shuffled_pool)
   return dict(zip(original_pool, shuffled_pool))

def inverse_monoalpha_cipher(monoalpha_cipher):
 inverse_monoalpha = {}
 for key, value in monoalpha_cipher.iteritems():
  inverse_monoalpha[value] = key
 return inverse_monoalpha

def encrypt_with_monoalpha(message, monoalpha_cipher):
 encrypted_message = []
 for letter in message:
  encrypted_message.append(monoalpha_cipher.get(letter, letter))
 return ''.join(encrypted_message)

def decrypt_with_monoalpha(encrypted_message, monoalpha_cipher):
 return encrypt_with_monoalpha(
encrypted_message,
inverse_monoalpha_cipher(monoalpha_cipher)
)
import monoalphabeticCipher as mc

cipher = mc.random_monoalpha_cipher()
print(cipher)
encrypted = mc.encrypt_with_monoalpha('mvyy bek mnyx n yvjjyr snijrh invq n muvjvdt je n idnvy jurhri n fehfevir pyeir oruvdq ki ndq jur jkhjyri nyy nqlndpr Jurb nhr mnvjvdt ed jur iuvdtyr mvyy bek pezr ndq wevd jur qndpr mvyy bek, medj bek, mvyy bek, medj bek, mvyy bek wevd jur qndpr mvyy bek, medj bek, mvyy bek, medj bek, medj bek wevd jur qndpr', cipher)
print(encrypted)
